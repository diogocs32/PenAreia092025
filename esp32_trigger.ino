/*
 * PenAreia ESP32-C6 Trigger Button
 *
 * Este c√≥digo conecta o ESP32-C6 na rede WiFi e descobre automaticamente
 * o servidor PenAreia usando mDNS. Quando o bot√£o √© pressionado, envia
 * um trigger para gravar v√≠deo.
 *
 * Hardware necess√°rio:
 * - ESP32-C6
 * - Bot√£o push conectado ao GPIO 9 (com pull-up interno)
 * - LED opcional no GPIO 8 para indica√ß√£o de status
 *
 * Bibliotecas necess√°rias:
 * - WiFi (inclu√≠da no core ESP32)
 * - ESPmDNS (inclu√≠da no core ESP32)
 * - HTTPClient (inclu√≠da no core ESP32)
 * - ArduinoJson (instalar via Library Manager)
 */

#include <WiFi.h>
#include <ESPmDNS.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// =============================================================================
// CONFIGURA√á√ïES - EDITE AQUI
// =============================================================================

// Configura√ß√µes WiFi
const char *ssid = "SUA_REDE_WIFI";      // Substitua pelo nome da sua rede
const char *password = "SUA_SENHA_WIFI"; // Substitua pela senha da sua rede

// Configura√ß√µes do hardware
const int BUTTON_PIN = 9;  // GPIO do bot√£o (com pull-up interno)
const int LED_PIN = 8;     // GPIO do LED de status
const int BUZZER_PIN = 10; // GPIO do buzzer (opcional)

// Configura√ß√µes do servi√ßo
const char *SERVICE_NAME = "PenAreia-Camera"; // Nome do servi√ßo mDNS
const char *SERVICE_TYPE = "_http";           // Tipo do servi√ßo
const char *SERVICE_PROTO = "_tcp";           // Protocolo

// Configura√ß√µes de debounce
const unsigned long DEBOUNCE_DELAY = 50;     // ms
const unsigned long TRIGGER_COOLDOWN = 3000; // ms - evita m√∫ltiplos triggers

// =============================================================================
// VARI√ÅVEIS GLOBAIS
// =============================================================================

String serverIP = "";
int serverPort = 5000;
bool serverFound = false;
unsigned long lastButtonPress = 0;
unsigned long lastTrigger = 0;
bool buttonState = HIGH;
bool lastButtonState = HIGH;

// =============================================================================
// SETUP
// =============================================================================

void setup()
{
    Serial.begin(115200);
    Serial.println();
    Serial.println("üé¨ === PenAreia ESP32-C6 Trigger ===");

    // Configura pinos
    pinMode(BUTTON_PIN, INPUT_PULLUP);
    pinMode(LED_PIN, OUTPUT);
    if (BUZZER_PIN > 0)
    {
        pinMode(BUZZER_PIN, OUTPUT);
    }

    // LED indica inicializa√ß√£o
    digitalWrite(LED_PIN, HIGH);

    // Conecta WiFi
    connectWiFi();

    // Descobre servidor PenAreia
    discoverServer();

    // LED indica pronto
    digitalWrite(LED_PIN, LOW);
    blinkLED(3, 200); // 3 piscadas r√°pidas = pronto

    Serial.println("‚úÖ Sistema pronto!");
    Serial.println("üîò Pressione o bot√£o para disparar grava√ß√£o");
}

// =============================================================================
// LOOP PRINCIPAL
// =============================================================================

void loop()
{
    // Verifica conex√£o WiFi
    if (WiFi.status() != WL_CONNECTED)
    {
        Serial.println("‚ö†Ô∏è WiFi desconectado, reconectando...");
        connectWiFi();
        return;
    }

    // Verifica servidor periodicamente
    static unsigned long lastServerCheck = 0;
    if (millis() - lastServerCheck > 30000)
    { // Verifica a cada 30s
        if (!serverFound)
        {
            Serial.println("üîç Tentando descobrir servidor novamente...");
            discoverServer();
        }
        lastServerCheck = millis();
    }

    // L√™ bot√£o com debounce
    int reading = digitalRead(BUTTON_PIN);

    if (reading != lastButtonState)
    {
        lastButtonPress = millis();
    }

    if ((millis() - lastButtonPress) > DEBOUNCE_DELAY)
    {
        if (reading != buttonState)
        {
            buttonState = reading;

            // Bot√£o pressionado (LOW = pressionado com pull-up)
            if (buttonState == LOW)
            {
                handleButtonPress();
            }
        }
    }

    lastButtonState = reading;

    delay(10); // Pequeno delay para estabilidade
}

// =============================================================================
// FUN√á√ïES WiFi
// =============================================================================

void connectWiFi()
{
    Serial.print("üì∂ Conectando WiFi");
    WiFi.begin(ssid, password);

    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20)
    {
        delay(500);
        Serial.print(".");
        attempts++;

        // Pisca LED durante conex√£o
        digitalWrite(LED_PIN, !digitalRead(LED_PIN));
    }

    if (WiFi.status() == WL_CONNECTED)
    {
        Serial.println();
        Serial.println("‚úÖ WiFi conectado!");
        Serial.print("üìç IP: ");
        Serial.println(WiFi.localIP());
        digitalWrite(LED_PIN, LOW);
    }
    else
    {
        Serial.println();
        Serial.println("‚ùå Falha na conex√£o WiFi!");
        digitalWrite(LED_PIN, HIGH);
    }
}

// =============================================================================
// DESCOBERTA mDNS
// =============================================================================

void discoverServer()
{
    Serial.println("üîç Descobrindo servidor PenAreia via mDNS...");

    if (!MDNS.begin("esp32-penareia-trigger"))
    {
        Serial.println("‚ùå Erro ao inicializar mDNS");
        return;
    }

    // Busca pelo servi√ßo
    Serial.print("üîé Buscando por ");
    Serial.print(SERVICE_NAME);
    Serial.println("...");

    int n = MDNS.queryService(SERVICE_TYPE, SERVICE_PROTO);

    if (n == 0)
    {
        Serial.println("‚ö†Ô∏è Nenhum servi√ßo encontrado");
        serverFound = false;
    }
    else
    {
        Serial.printf("‚úÖ %d servi√ßo(s) encontrado(s):\\n", n);

        // Procura pelo servi√ßo PenAreia
        for (int i = 0; i < n; ++i)
        {
            String instanceName = MDNS.hostname(i);
            Serial.printf("  %d: %s (%s:%d)\\n",
                          i + 1,
                          instanceName.c_str(),
                          MDNS.IP(i).toString().c_str(),
                          MDNS.port(i));

            // Verifica se √© o nosso servi√ßo
            if (instanceName.indexOf(SERVICE_NAME) >= 0)
            {
                serverIP = MDNS.IP(i).toString();
                serverPort = MDNS.port(i);
                serverFound = true;

                Serial.println("üéØ Servidor PenAreia encontrado!");
                Serial.printf("üì° Endere√ßo: http://%s:%d\\n", serverIP.c_str(), serverPort);

                // Testa conex√£o
                if (testServerConnection())
                {
                    Serial.println("‚úÖ Conex√£o com servidor confirmada!");
                    playSuccessSound();
                }
                break;
            }
        }

        if (!serverFound)
        {
            Serial.println("‚ö†Ô∏è Servidor PenAreia n√£o encontrado nos servi√ßos mDNS");
        }
    }
}

// =============================================================================
// COMUNICA√á√ÉO HTTP
// =============================================================================

bool testServerConnection()
{
    if (!serverFound)
        return false;

    HTTPClient http;
    String url = "http://" + serverIP + ":" + String(serverPort) + "/status";

    Serial.println("üß™ Testando conex√£o com servidor...");

    http.begin(url);
    http.setTimeout(5000);

    int httpCode = http.GET();

    if (httpCode == HTTP_CODE_OK)
    {
        String payload = http.getString();

        // Parse JSON para verificar status
        DynamicJsonDocument doc(1024);
        DeserializationError error = deserializeJson(doc, payload);

        if (!error)
        {
            const char *status = doc["status"];
            if (status && strcmp(status, "online") == 0)
            {
                Serial.println("‚úÖ Servidor online e funcionando!");
                http.end();
                return true;
            }
        }
    }

    Serial.printf("‚ùå Erro na conex√£o: %d\\n", httpCode);
    http.end();
    return false;
}

void sendTrigger()
{
    if (!serverFound)
    {
        Serial.println("‚ùå Servidor n√£o encontrado! Tentando descobrir...");
        discoverServer();
        return;
    }

    HTTPClient http;
    String url = "http://" + serverIP + ":" + String(serverPort) + "/trigger";

    Serial.println("üé¨ Enviando trigger para grava√ß√£o...");

    http.begin(url);
    http.addHeader("Content-Type", "application/json");
    http.setTimeout(30000); // 30s timeout para upload

    // Indica que est√° enviando
    digitalWrite(LED_PIN, HIGH);

    int httpCode = http.POST("{}");

    if (httpCode == HTTP_CODE_OK)
    {
        String response = http.getString();

        // Parse da resposta
        DynamicJsonDocument doc(2048);
        DeserializationError error = deserializeJson(doc, response);

        if (!error)
        {
            bool success = doc["success"];
            const char *message = doc["message"];
            const char *url = doc["url"];

            if (success)
            {
                Serial.println("‚úÖ Grava√ß√£o iniciada com sucesso!");
                if (message)
                    Serial.printf("üìÑ %s\\n", message);
                if (url)
                    Serial.printf("üîó URL: %s\\n", url);

                playSuccessSound();
                blinkLED(5, 100); // 5 piscadas r√°pidas = sucesso
            }
            else
            {
                Serial.println("‚ö†Ô∏è Grava√ß√£o iniciada mas houve problemas");
                if (message)
                    Serial.printf("üìÑ %s\\n", message);

                playWarningSound();
                blinkLED(3, 300); // 3 piscadas lentas = aviso
            }
        }
        else
        {
            Serial.println("‚úÖ Trigger enviado (resposta n√£o parse√°vel)");
            blinkLED(2, 200);
        }
    }
    else
    {
        Serial.printf("‚ùå Erro HTTP: %d\\n", httpCode);

        if (httpCode == -1)
        {
            Serial.println("üîç Servidor pode ter mudado, tentando redescobrir...");
            serverFound = false;
        }

        playErrorSound();
        blinkLED(10, 50); // Piscadas r√°pidas = erro
    }

    digitalWrite(LED_PIN, LOW);
    http.end();
}

// =============================================================================
// MANIPULA√á√ÉO DE EVENTOS
// =============================================================================

void handleButtonPress()
{
    unsigned long currentTime = millis();

    // Verifica cooldown
    if (currentTime - lastTrigger < TRIGGER_COOLDOWN)
    {
        Serial.println("‚è≥ Aguarde antes de pressionar novamente...");
        blinkLED(1, 100);
        return;
    }

    Serial.println("üîò Bot√£o pressionado!");
    lastTrigger = currentTime;

    // Verifica se est√° conectado
    if (WiFi.status() != WL_CONNECTED)
    {
        Serial.println("‚ùå WiFi desconectado!");
        playErrorSound();
        return;
    }

    // Envia trigger
    sendTrigger();
}

// =============================================================================
// FUN√á√ïES DE FEEDBACK
// =============================================================================

void blinkLED(int times, int delayMs)
{
    for (int i = 0; i < times; i++)
    {
        digitalWrite(LED_PIN, HIGH);
        delay(delayMs);
        digitalWrite(LED_PIN, LOW);
        delay(delayMs);
    }
}

void playSuccessSound()
{
    if (BUZZER_PIN <= 0)
        return;

    // Dois beeps curtos
    tone(BUZZER_PIN, 1000, 100);
    delay(150);
    tone(BUZZER_PIN, 1200, 100);
}

void playWarningSound()
{
    if (BUZZER_PIN <= 0)
        return;

    // Tr√™s beeps m√©dios
    for (int i = 0; i < 3; i++)
    {
        tone(BUZZER_PIN, 800, 200);
        delay(300);
    }
}

void playErrorSound()
{
    if (BUZZER_PIN <= 0)
        return;

    // Um beep longo grave
    tone(BUZZER_PIN, 400, 500);
}

// =============================================================================
// FUN√á√ïES DE UTILIDADE
// =============================================================================

void printStatus()
{
    Serial.println("\\nüìä === STATUS DO SISTEMA ===");
    Serial.printf("üì∂ WiFi: %s\\n", WiFi.status() == WL_CONNECTED ? "Conectado" : "Desconectado");
    if (WiFi.status() == WL_CONNECTED)
    {
        Serial.printf("üìç IP Local: %s\\n", WiFi.localIP().toString().c_str());
    }
    Serial.printf("üéØ Servidor: %s\\n", serverFound ? "Encontrado" : "N√£o encontrado");
    if (serverFound)
    {
        Serial.printf("üì° Endere√ßo: http://%s:%d\\n", serverIP.c_str(), serverPort);
    }
    Serial.printf("üîò √öltimo trigger: %lu ms atr√°s\\n", millis() - lastTrigger);
    Serial.printf("üíæ Mem√≥ria livre: %d bytes\\n", ESP.getFreeHeap());
    Serial.println("================================\\n");
}